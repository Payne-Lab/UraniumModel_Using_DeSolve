setwd("~/Box Sync/Uranium MCMC/")

#install.packages("deSolve")
library(deSolve) #load the deSolve package

## how many iterations ##
nreps <- 50

# length of model run #
duration <-1.8e6 #duration of model run
dt <- 1000 #time step therefore 1800 data points for each run
t.anox.start <- 472000 #time of the onset of perturbation

#set distributions for drawing values for parameters to be estimated
#These are our uniform priors
D.other <- runif(n=nreps, min = -0.05, max = 0.05) #fractionation in oxygenated environments
D.anox <- runif(n=nreps, min = 0.2, max = 1.2) #fractionation in anoxic environments
f.anox.b <- runif(n=nreps, min = 0.0, max = 0.01) #anoxic seafloor fraction before/after perturbation 
f.anox.p <- runif(n=nreps, min = 0.0, max = 0.3) #anoxic seafloor fraction during perturbation
dur.p <- runif(n=nreps, min = 0, max = duration-t.anox.start) #duration of perturbation

#values to be used in setting up the model
t.anox.end <- t.anox.start + dur.p #time of the end of the perturbation
steps <- duration/dt #number of time steps in the model

##set up data frame to store output from the model
U.ocean <- data.frame(matrix(nrow=steps+1, ncol=nreps)) #matrix of ocean uranium concentrations
U238.ocean <- data.frame(matrix(nrow=steps+1, ncol=nreps)) #matrix of uranium isotope compositions
params <- data.frame(matrix(nrow=nreps, ncol=5))
names(params) <- c("D.other", "D.anox", "f.anox.b", "f.anox.p", "dur.p")


##set up repetitions of model runs using for loop##
for (i in 1:nreps) {
print(i)

#uranium cycle model#
model <- function (time, y, parms) {
  with(as.list(c(y, parms)), {
    f.anox <- f.an(time)
    dU = J.riv - k.anox*f.anox*y[1] - k.other*(1-f.anox)*y[1]
    dU238 = (J.riv*(deltaU.riv - U238) - k.anox*f.anox*y[1]*D.anox[i] - k.other*(1-f.anox)*y[1]*D.other[i])/y[1]
    list(c(dU, dU238))
  })
}

y <- c(U = 1.96e13, #mol U (Morford and Emerson 1999)
       U238 = -0.165) #Lau et al 2016

parms <- c(J.riv = 0.4e8, #Lau et al 2016
           k.anox = 1.45772594752187e-4, #Lau et al 2016, calculated
           k.other = 1.73834440079269e-6, #Lau et al 2016, to reach steady state
           deltaU.riv=-0.05) #Lau et al 2016, calculated steady state input to produce d238U ~ -0.165

times <- seq(0, duration, dt)

forceanox=c(rep(f.anox.b[i],(t.anox.start/dt+1)), rep(f.anox.p[i], #set up anoxia forcing function
          (t.anox.end[i]-t.anox.start)/dt), rep(f.anox.b[i], 
          (duration-t.anox.end[i])/dt+1))

anox.event=data.frame(times,forceanox)  #put the anoxia forcing into data frame with time
f.an = approxfun(x=anox.event[,1],y=anox.event[,2],method="linear",rule=2) #function for calculating f.anox in model

out <- data.frame(ode(y, times, model, parms))

## need to store output from the model and parameter values in a data frame
U.ocean[,i] <- log10(out[,2]) #put uranium concentrations from model into data frame
U238.ocean[,i] <- out[,3] #put uranium isotopes from model into data frame

params[i,1] <- D.other[i] #store value for D.other, fractionation in oxic environments
params[i,2] <- D.anox[i] #store value for D.anox, fractionation in anoxic environments
params[i,3] <- f.anox.b[i] #store value for f.anox.b, background anoxia level
params[i,4] <- f.anox.p[i] #store value for f.anox.p, perturbation anoxia level
params[i,5] <- dur.p[i] #store value for dur.p, duration of perturbation

}

#add time variable to model output for matching with data
U.ocean$mod.age <- times
U238.ocean$mod.age <- times



#The subset( ) function is the easiest way to select variables and observations. 
#In the following example, we select all rows that have a value of age greater than 
#or equal to 20 or age less then 10. We keep the ID and Weight columns.
#newdata <- subset(mydata, age >= 20 | age < 10,
                  #select=c(ID, Weight))



## read in data from file ##
u.data <- read.delim(file="lau.u.data.txt", sep="\t")
u.data$logU <- log10(u.data$U_ppb) + 9.99 #(taking log transformation of U concentrations and then multiplying to get ocean in moles)
u.data <- subset(u.data, Age_Mya>0) #subset to values with ages, selects all rows with Age_Mya >0
u.data$mod.age <- 252.42e6 - 1e6*round(u.data$Age_Mya, 3) #round ages to match with model
u.data <- subset(u.data, mod.age>0 & mod.age<duration) #make sure all samples used fall within duration of simulation
u.data <- u.data[order(u.data$mod.age),]  # [vector, ] takes all the coloumn, but only the rows in vector and puts them in 

#plot data to check for errors
par(mfrow=c(2,1), mar=c(4,4,1,1))
plot(u.data$U238~u.data$mod.age, las=1, xlab="age in model years",
     ylab="d238U")
plot(u.data$logU~u.data$mod.age, las=1, xlab="age in model years",
     ylab="log ocean U reservoir")

#extract the values for the time points of interest from the model runs
samples <- data.frame(u.data$mod.age) #define data frame with ages of samples
names(samples) <- c("mod.age") #name ages of datapoints to match ages in model
samples.delta <- na.omit(data.frame(u.data$U238, u.data$mod.age)) #two coloumn vectors of times and ufracs from data
samples.d <- data.frame(samples.delta$u.data.mod.age) #one coloumn vector of times
names(samples.d) <- c("mod.age")

first.diff.delta <- diff(samples.delta$u.data.U238, lag=1, differences=1)
first.diff.conc <- diff(u.data$logU, lag=1, differences=1)
sd(first.diff.delta)
sd(first.diff.conc)

#DF <- data.frame(x = c(1, 2, 3), y = c(0, 10, NA), d = c(1, 3, 7))
#> names(DF) <- c("U238","mod.age","gal")
#> DF
#U238 mod.age gal
#1    1       0   1
#2    2      10   3
#3    3      NA   7

# dff <- na.omit(data.frame(DF$U238,DF$mod.age))
# dff
#DF.U238 DF.mod.age
#1       1      0
#2       2     10

#diff() takes the next number in index and subract the previous number 


#merge with data files by age
#Merge two data frames by common columns or row names, 
#The rows in the two data frames that match on the specified columns are extracted, and joined together. 
#If there is more than one match, all possible matches contribute one row each. 
mod.output.d <- merge(samples.d, U238.ocean, by="mod.age", all=FALSE)
plot(mod.output.d[,2]~mod.output.d$mod.age)
mod.output.d <- mod.output.d[,2:(nreps+1)] #takes away time vector in coloumn 1 leving only model output

mod.output.c <- merge(samples, U.ocean, by="mod.age", all=FALSE)
plot(mod.output.c[,2]~mod.output.c$mod.age)
mod.output.c <- mod.output.c[,2:(nreps+1)]

#add noise to the values for the time points of interest from the model runs
#NEED TO CONSIDER HOW TO DO THIS FROM DATA
  #1. FROM MEASUREMENT ERROR ON INDIVIDUAL POINTS?
  #2. FROM FIRST DIFFERENCES AMONG DATAPOINTS?
noise.d <- matrix(data = rnorm(n=nrow(mod.output.d)*ncol(mod.output.d), mean=0, sd=sd(first.diff.delta))
                , nrow = nrow(mod.output.d), ncol = ncol(mod.output.d))

noise.c <- matrix(data = rnorm(n=nrow(mod.output.c)*ncol(mod.output.c), mean=0, sd=sd(first.diff.conc))
                  , nrow = nrow(mod.output.c), ncol = ncol(mod.output.c))


mod.dn <- mod.output.d+noise.d
mod.cn <- mod.output.c+noise.c
mod.dn[,(nreps+1)] <- samples.delta$u.data.U238
mod.cn[,(nreps+1)] <- u.data$logU

#NEED TO STANDARDIZE DATA TO MEAN ZERO AND UNIT VARIANCE PRIOR TO PCA
z <- matrix(data=runif(n=9,min=0,max=1), nrow=3, ncol=3)
z1 <- (z - mean(z))/sd(z)

mod.dn1 <- as.matrix(mod.dn)
m.dn1 <- (mod.dn1-mean(mod.dn1))/sd(mod.dn1)
mod.cn1 <- as.matrix(mod.cn)
m.cn1 <- (mod.cn1-mean(mod.cn1))/sd(mod.cn1)

plot(mod.dn[,1]~samples.d$mod.age, las=1)
plot(mod.cn[,1]~samples$mod.age, las=1)

#combine model output for isotopes with model output for concentrations
mod <- rbind(m.dn1, m.cn1)



#PCA of model runs, plot and color code by parameter values, examine where real data plot
pca <- princomp(t(mod))
PoV <- pca$sdev^2/sum(pca$sdev^2)

#pdf("screeplot.pdf", h=6, w=5)
par(mfrow=c(1,1))
plot(100*PoV[PoV>0.01], pch=1, las=1, ylab="Percent Variance Explained",
     xlab="Principal Component")
lines(100*PoV[PoV>0.01])
#dev.off()

zz <- as.data.frame(pca$scores[,1:6])

### APPROXIMATE BAYES COMPUTATION ###
ref<-zz[nreps+1,]
zz$distance <- apply(zz,1,function(x)sqrt(sum((x-ref)^2)))

##combine pca scores and distance with parameter values##
zz.1 <- cbind(params, zz[1:nreps,])

#need to figure out how to color code by parameter values
rbPal <- colorRampPalette(c('yellow', 'black'))

#This adds a column of color values
# based on the y values
zz.1$Col.D.other <- rbPal(100)[as.numeric(cut(zz.1$D.other,breaks = 100))]
zz.1$Col.D.anox <- rbPal(100)[as.numeric(cut(zz.1$D.anox,breaks = 100))]
zz.1$Col.f.anox.b <- rbPal(100)[as.numeric(cut(zz.1$f.anox.b,breaks = 100))]
zz.1$Col.f.anox.p <- rbPal(100)[as.numeric(cut(zz.1$f.anox.p,breaks = 100))]
zz.1$Col.dur.p <- rbPal(100)[as.numeric(cut(zz.1$dur.p,breaks = 100))]
zz.1$Col.distance <- rbPal(100)[as.numeric(cut(zz.1$distance, breaks = 100))]

cols <- list(zz.1$Col.D.other, zz.1$Col.D.anox, zz.1$Col.f.anox.b, zz.1$Col.f.anox.p, zz.1$Col.dur.p, zz.1$Col.distance)
titles <- c("D.other", "D.anox", "f.anox.b", "f.anox.p", "dur.p", "distance")
lim.lower <- c(min(params$D.other), min(params$D.anox), min(params$f.anox.b),
               min(params$f.anox.p), min(params$dur.p)/100000, min(zz.1$distance))
lim.upper <- c(max(params$D.other), max(params$D.anox), max(params$f.anox.b),
               max(params$f.anox.p), max(params$dur.p)/100000, max(zz.1$distance))

#install.packages("SDMTools")
library(SDMTools)


#pdf("pca.plot.pc1.pc2.pdf", h=9, w=6)
par(mfrow=c(3,2), mar=c(4,4,1,4), oma=c(0,0,1,0), mgp=c(2,1,0), xpd=TRUE)
for (i in 1:length(cols)) {
  plot(zz.1$Comp.1,zz.1$Comp.2,pch = 16,col = cols[[i]], cex=1, las=1,
       xlab="PC1", ylab="PC2")
  points(zz$Comp.1[nreps+1],zz$Comp.2[nreps+1], pch=16, col="red", cex=1)
  mtext(side=3, titles[i], line=0)
  pnts <- cbind(x=c(max(zz.1$Comp.1+1),max(zz.1$Comp.1+3),
                    max(zz.1$Comp.1+3),max(zz.1$Comp.1+1)),
                y=c(max(zz.1$Comp.2),max(zz.1$Comp.2),
                    min(zz.1$Comp.2),min(zz.1$Comp.2)))
  legend.gradient(pnts, rbPal(100), title="",
        limits = c(round(lim.lower[i],2), round(lim.upper[i],2)))
}
#dev.off()

#pdf("pca.plot.pc2.pc3.pdf", h=9, w=6)
par(mfrow=c(3,2), mar=c(4,4,1,4), oma=c(0,0,1,0), mgp=c(2,1,0), xpd=TRUE)
for (i in 1:length(cols)) {
  plot(zz.1$Comp.2,zz.1$Comp.3,pch = 16,col = cols[[i]], cex=1, las=1,
       xlab="PC2", ylab="PC3")
  points(zz$Comp.1[nreps+1],zz$Comp.2[nreps+1], pch=16, col="red", cex=1)
  mtext(side=3, titles[i], line=0)
  pnts <- cbind(x=c(max(zz.1$Comp.2+0.5),max(zz.1$Comp.2+2),
                    max(zz.1$Comp.2+2),max(zz.1$Comp.2+0.5)),
                y=c(max(zz.1$Comp.3),max(zz.1$Comp.3),
                    min(zz.1$Comp.3),min(zz.1$Comp.3)))
  legend.gradient(pnts, rbPal(100), title="",
                  limits = c(round(lim.lower[i], 2), round(lim.upper[i],2)))
}
#dev.off()

#pdf("pca.plot.pc1.pc3.pdf", h=9, w=6)
par(mfrow=c(3,2), mar=c(4,4,1,4), oma=c(0,0,1,0), mgp=c(2,1,0), xpd=TRUE)
for (i in 1:length(cols)) {
  plot(zz.1$Comp.1,zz.1$Comp.3,pch = 16,col = cols[[i]], cex=1, las=1,
       xlab="PC1", ylab="PC3")
  points(zz$Comp.1[nreps+1],zz$Comp.2[nreps+1], pch=16, col="red", cex=2)
  mtext(side=3, titles[i], line=0)
  pnts <- cbind(x=c(max(zz.1$Comp.1+0.5),max(zz.1$Comp.1+2),
                    max(zz.1$Comp.1+2),max(zz.1$Comp.1+0.5)),
                y=c(max(zz.1$Comp.3),max(zz.1$Comp.3),
                    min(zz.1$Comp.3),min(zz.1$Comp.3)))
  legend.gradient(pnts, rbPal(100), title="",
                  limits = c(round(lim.lower[i], 2), round(lim.upper[i],2)))
}
#dev.off()


### get parameter values via approximate bayes computation ###
hist(zz.1$f.anox.p)
hist(zz.1$distance)
dist <- min(zz.1$distance)
zz.2 <- subset(zz.1, distance<dist+3)
hist(zz.2$distance)
plot(zz.2$Comp.1~zz.2$f.anox.p)
hist(zz.1$f.anox.p)
hist(zz.2$f.anox.p)
d1 <- density(zz.2$f.anox.p)
d2 <- density(zz.2$f.anox.b)
d3 <- density(zz.2$D.anox)
d4 <- density(zz.2$D.other)
d5 <- density(zz.2$dur.p)

#pdf("abc.parameters.density.pdf", h=8, w=6)
par(mfrow=(c(3,2)), mar=c(3,4,1,1))
plot(d1, main="f.anox.p", las=1)
polygon(d1, col="red", border="black")
plot(d2, main="f.anox.b", las=1)
polygon(d2, col="red", border="black")
plot(d3, main="D.anox", las=1)
polygon(d3, col="red", border="black")
plot(d4, main="D.other", las=1)
polygon(d4, col="red", border="black")
plot(d5, main="dur.p", las=1)
polygon(d5, col="red", border="black")
#dev.off()

#pdf("abc.parameters.scatterplot.pdf", h=6, w=6)
par(mfrow=(c(2,2)), mar=c(4,4,1,1))
plot(zz.2$f.anox.p~zz.2$D.anox, las=1, xlab="D.anox", ylab="f.anox.p")
plot(zz.2$f.anox.p~zz.2$dur.p, las=1, xlab="dur.p", ylab="f.anox.p")
plot(zz.2$D.anox~zz.2$dur.p, las=1, xlab="dur.p", ylab="D.anox")
#dev.off()

### PLOT OUTPUT OF MODEL RUNS THAT ARE INCLUDED AFTER EPSILON FILTER
## WILL SHOW UNCERTAINTY IN THE TIME HISTORY

myvars <- rownames(zz.2)
U.ocean.distance <- U.ocean[,myvars]
U238.ocean.distance <- U238.ocean[,myvars]

#pdf("model runs posterior.pdf", h=4, w=6)
par(mfrow=c(2,2), mar=c(4,4,0.2,0.2))

plot(U.ocean[,1]~out[,1], cex=0.1, col="white", las=1, ylim=c(11.8, 13.5),
     xlab="model years", ylab="moles of U in ocean")
for (i in 1:nreps) { lines(U.ocean[,i]~out[,1], cex=0.1, col=rgb(0, 0, 255, max = 255, alpha = 30))}
for (i in 1:ncol(U.ocean.distance)) { lines(U.ocean.distance[,i]~out[,1], cex=0.1, col=rgb(255, 255, 255, max = 255, alpha = 100))}

plot(U238.ocean[,1]~out[,1], pch=1, cex=0.1, col="white", ylim=c(-2.5,0.2), las=1,
     xlab="model years", ylab="d238U ocean")
for (i in 1:nreps) {lines(U238.ocean[,i]~out[,1], cex=0.1, col=rgb(0, 0, 255, max = 255, alpha = 30))}
for (i in 1:ncol(U238.ocean.distance)) { lines(U238.ocean.distance[,i]~out[,1], cex=0.1, col=rgb(255, 255, 255, max = 255, alpha = 100))}

plot(U.ocean.distance[,1]~out[,1], cex=0.1, col="white", las=1, ylim=c(11.8, 13.5),
     xlab="model years", ylab="moles of U in ocean")
for (i in 1:ncol(U.ocean.distance)) { lines(U.ocean.distance[,i]~out[,1], cex=0.1, col=rgb(0, 0, 255, max = 255, alpha = 30))}

plot(U238.ocean.distance[,1]~out[,1], pch=1, cex=0.1, col="white", ylim=c(-2.5,0.2), las=1,
     xlab="model years", ylab="d238U ocean")
for (i in 1:ncol(U238.ocean.distance)) {lines(U238.ocean.distance[,i]~out[,1], cex=0.1, col=rgb(0, 0, 255, max = 255, alpha = 30))}
#dev.off()
